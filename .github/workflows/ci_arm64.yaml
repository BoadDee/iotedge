---
name: CI Arm64

on: # yamllint disable-line rule:truthy
  push:
    branches:
      - main
      - features/*
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  id-token: write
  checks: write
  issues: read

env:
  ACR_IMAGE_PATH_FRONTEND: ${{ secrets.ACR_LOGIN_SERVER }}/frontendmodule:1.0.${{ github.run_number }}-arm64v8
  ACR_IMAGE_PATH_BACKEND: ${{ secrets.ACR_LOGIN_SERVER }}/backendmodule:1.0.${{ github.run_number }}-arm64v8
  ACR_USERNAME: ${{ secrets.ACR_USERNAME }}
  ACR_PASSWORD: ${{ secrets.ACR_PASSWORD }}
  ACR_ADDRESS: ${{ secrets.ACR_LOGIN_SERVER }}


jobs:
  build:
    environment: de
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          make install

      # - name: MegaLinter
      #   id: ml
      #   uses: megalinter/megalinter@v5.7.1
      #   continue-on-error: true
      #   env:
      #     VALIDATE_ALL_CODEBASE: true
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SHOW_ELAPSED_TIME: true
      #     GITHUB_STATUS_REPORTER: false

      # - name: Archive production artifacts
      #   if: ${{ success() }} || ${{ failure() }}
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: MegaLinter reports
      #     path: |
      #       report
      #       mega-linter.log

      # - name: Executing unittests for backend
      #   id: unittests-backend
      #   continue-on-error: true
      #   run: |
      #     make backend_tests

      # - name: Executing unittests for frontend
      #   id: unittests-frontend
      #   continue-on-error: true
      #   run: |
      #     make frontend_tests

      # - name: Publish Unit Test Results
      #   uses: EnricoMi/publish-unit-test-result-action@v1.32
      #   if: always()
      #   with:
      #     files: ./EdgeSolution/modules/**/nose2-junit.xml
      #     report_individual_runs: true

      # - name: Upload coverage report for backend
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: code-coverage-report
      #     path: ./EdgeSolution/modules/BackendModule/htmlcov

      # - name: Upload coverage report for frontend
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: code-coverage-report
      #     path: ./EdgeSolution/modules/FrontendModule/coverage

      # - name: Check on failures
      #   if: steps.ml.outcome != 'success' || steps.unittests-backend.outcome != 'success' || steps.unittests-frontend.outcome != 'success'
      #   run: exit 1

      # - name: Install qemu emulator
      #   run: |
      #     make install_qemu

      - name: Login to ACR
        uses: Azure/docker-login@v1
        with:
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}

      - name: Build and push docker images
        run: |
          cd ${{github.workspace}}/EdgeSolution
          
          for folder in modules/*; do
            echo "$(basename $folder)"
            for file in $folder/*; do
              echo "$(basename $file)"
              moduleName=$(basename $folder)
              if [ -f "$file/Dockerfile.arm64v8" ]; then
                echo "Building $file"
                docker build -t ${{env.ACR_LOGIN_SERVER}}/$(basename $folder)/$(basename $file):1.0.${{ github.run_number }}-arm64v8 -f $file/Dockerfile.arm64v8 .
                docker push ${{env.ACR_LOGIN_SERVER}}/$(basename $folder)/$(basename $file):1.0.${{ github.run_number }}-arm64v8
              else
                if [ -f "$file/Dockerfile.arm64v8.debug" ]; then
                  echo "Building $file"
                  docker build -t ${{env.ACR_LOGIN_SERVER}}/$(basename $folder)/$(basename $file):1.0.${{ github.run_number }}-arm64v8 -f $file/Dockerfile.arm64v8.debug .
                  docker push ${{env.ACR_LOGIN_SERVER}}/$(basename $folder)/$(basename $file):1.0.${{ github.run_number }}-arm64v8
                fi
              fi
            done
          done
          
      # - name: Build backend docker image
      #   run: |
      #     cd ./EdgeSolution/modules/BackendModule
      #     docker build -t ${{env.ACR_IMAGE_PATH_BACKEND}} -f Dockerfile.arm32v7 .

      # - name: Build frontend docker image
      #   run: |
      #     cd ./EdgeSolution/modules/FrontendModule
      #     docker build -t ${{env.ACR_IMAGE_PATH_FRONTEND}} -f Dockerfile.arm32v7 .

      # - name: Push backend docker image
      #   run: |
      #     docker push ${{env.ACR_IMAGE_PATH_BACKEND}}

      # - name: Push frontend docker image
      #   run: |
      #     docker push ${{env.ACR_IMAGE_PATH_FRONTEND}}
      
      - name: Read variables from env file
        run: |
          cat ${{github.workspace}}/EdgeSolution/deployment.template.json
          sed -i 's%\${ACR_USERNAME}%'"${ACR_USERNAME}"'%g' ./EdgeSolution/deployment.template.json
          sed -i 's%\${ACR_PASSWORD}%'"${ACR_PASSWORD}"'%g' ./EdgeSolution/deployment.template.json
          sed -i 's%\${ACR_ADDRESS}%'"${ACR_ADDRESS}"'%g' ./EdgeSolution/deployment.template.json
          cat ${{github.workspace}}/EdgeSolution/deployment.template.json

          # # cp ${{github.workspace}}/EdgeSolution/.env_template ./EdgeSolution/.env
          # cat ./EdgeSolution/deployment.template.json
          # sed -i 's/^#.*//' ./EdgeSolution/deployment.template.json
          # sed -i '/^$/d' ./EdgeSolution/deployment.template.json
          # sed -i 's%^ACR_USERNAME=.*%ACR_USERNAME=${{ secrets.ACR_USERNAME }}%' ./EdgeSolution/deployment.template.json
          # sed -i 's%^ACR_PASSWORD=.*%ACR_PASSWORD=${{ secrets.ACR_PASSWORD }}%' ./EdgeSolution/deployment.template.json
          # sed -i 's%^ACR_ADDRESS=.*%ACR_ADDRESS=${{ secrets.ACR_LOGIN_SERVER }}%' ./EdgeSolution/deployment.template.json
          # # sed -i 's%^LOG_ANALYTICS_WORKSPACE_ID=.*%LOG_ANALYTICS_WORKSPACE_ID=${{ secrets.LOG_ANALYTICS_WORKSPACE_ID}}%' ./EdgeSolution/.env
          # # sed -i 's%^LOG_ANALYTICS_SHARED_KEY=.*%LOG_ANALYTICS_SHARED_KEY=${{ secrets.LOG_ANALYTICS_SHARED_KEY}}%' ./EdgeSolution/.env
          # # sed -i 's%^APPINSIGHTS_CONNECTION_STRING=.*%APPINSIGHTS_CONNECTION_STRING=${{ secrets.APPINSIGHTS_CONNECTION_STRING}}%' ./EdgeSolution/.env
          # # sed -i 's%^IOT_HUB_RESOURCE_ID=.*%IOT_HUB_RESOURCE_ID=${{ secrets.IOT_HUB_RESOURCE_ID }}%' ./EdgeSolution/.env
          # cat ./EdgeSolution/deployment.template.json


      - name: Publish artifacts
        uses: actions/upload-artifact@v4
        with:
          name: deploymentTemplates
          path: |
            ${{github.workspace}}/EdgeSolution/deployment.template.json
          include-hidden-files: true

  deploy-de:
    uses: ./.github/workflows/cd_arm64.yaml
    needs: build
    with:
      environment: de
      iotHubName: dare

    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}